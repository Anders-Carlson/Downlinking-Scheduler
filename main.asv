clc, clear, close all
tic
%% Inital Setup

% Connect to STK
app = actxserver('STK12.application');
root = app.Personality2;

% Scenario Setup
scenario = root.Children.New('eScenario','MATLAB_AurisOrbit');

%scenario.SetTimePeriod('1 Mar 2023 00:00:00.000','1 Mar 2023 06:00:00.000'); %Scenario time period
scenario.SetTimePeriod('1 Mar 2023 00:00:00.000','1 Mar 2024 00:00:00.000'); %Scenario time period
scenario.StartTime = '1 Mar 2023 00:00:00.000'; %Scenario start time

%scenario.StopTime = '1 Mar 2023 06:00:00.000'; %Scenario end time
scenario.StopTime = '1 Mar 2024 00:00:00.000'; %Scenario end time
root.ExecuteCommand('Animate * Reset');
root.UnitPreferences.Item('DateFormat').SetCurrentUnit('EpSec'); %Sets time unit to epsec

%% Satellite Setup
satellite = scenario.Children.New('eSatellite','Auris');  %creates the auris satellite object
model = satellite.VO.Model; %shortcut to modify satellite model properties

% Define model file location (should be a .dae file with a .anc file of the same name in the same folder)
model.ModelData.Filename = 'G:\Shared drives\MTU Aerospace\(2) Auris\(2) Mission Level\(1) Mission Operations [MOP]\(3) Illumination Analysis\auris9u.dae';
keplerian = satellite.Propagator.InitialState.Representation.ConvertTo('eOrbitStateClassical'); % Use the Classical Element interface
keplerian.SizeShapeType = 'eSizeShapeAltitude';  % Changes from Ecc/Inc to Perigee/Apogee Altitude
keplerian.LocationType = 'eLocationTrueAnomaly'; % Makes sure True Anomaly is being used
keplerian.Orientation.AscNodeType = 'eAscNodeLAN'; % Use LAN instead of RAAN for data entry

% Assign the perigee and apogee altitude values:
keplerian.SizeShape.PerigeeAltitude = 500;      % km
keplerian.SizeShape.ApogeeAltitude = 500;       % km

% Assign the other desired orbital parameters:
keplerian.Orientation.Inclination = 60;         % deg
keplerian.Orientation.ArgOfPerigee = 0;        % deg
keplerian.Orientation.AscNode.Value =0;       % deg
keplerian.Location.Value = 0;                 % deg

% Apply the changes made to the satellite's state and propagate:
satellite.Propagator.InitialState.Representation.Assign(keplerian);
satellite.Propagator.Propagate;

%% Echostar Setup

satellite2 = scenario.Children.New('eSatellite','Echostar_14'); %Creates the echostar 14 satellite object
satellite2.SetPropagatorType('ePropagatorSGP4'); %Sets propogator type
propagator = satellite2.Propagator; % shortens variable name
propagator.CommonTasks.AddSegsFromOnlineSource('36499'); %assigns orbital properties to echostar 14 based on the online source ID
propagator.AutoUpdateEnabled = true; %Enables auto updating
propagator.Propagate; %Propogates the orbit

%% Create CONUS Target United States
areaTarget = root.CurrentScenario.Children.New('eAreaTarget', 'United_States'); %Creates area target object with name United_States
boundary = {32.52576, -117.14053;
            40.41181, -124.35587;
            48.35843, -124.66039;
            48.98534, -122.77966;
            48.31873, -88.41035;
            45.30887, -82.56263;
            41.95503, -81.96066;
            47.52141, -68.96015;
            45.02647, -66.99605;
            25.19181, -80.42174;
            29.73341, -85.14031;
            25.84061, -95.22624;
            32.68253, -117.28554}; %Defines the boundary of CONUS using a series of points
areaTarget.CommonTasks.SetAreaTypePattern(boundary); %Applies the boundary defined above to the CONUS area target
%% Access
% Get access by STK Object:US
accessUS = satellite.GetAccessToObject(areaTarget); %Defines the access times between the satellite object (Auris) and the areaTarget object (CONUS)
% Compute access
accessUS.ComputeAccess(); % Computes the access times defined previously

%% Get Access Intervals
%Seeing if we can extract the access interval times
intervalCollection = accessUS.ComputedAccessIntervalTimes;

% Set the intervals to use to the Computed Access Intervals
accessintervals = intervalCollection.ToArray(0, -1);
accessUS.SpecifyAccessIntervals(accessintervals);

%%Plo
% Determine the length of the access array (basically, how many times the
% satellite will be able to "see" CONUS/GNDSTs
access_length = length(access);

bool = zeros(1,s)';

% Create a vector that will serve as a running total of the data in the
% satellite
data = zeros(1, s)';

% Loop through the entire access array
for i = 1:length(access)
   % Loop through the data array where the access is happening
   for j = access(i,1):access(i,2)
    % Basically, where there is an access time flip the boolean
     bool(j) = 1;
   end
end


data = zeros(1, s)';

for i = 2:length(data)
    if(bool(i) == 1)
        % Where there is a boolean in bool add 48 bits to the last element's value and it set it to the current element
        data(i) = data(i-1) + 48;
    else
        % If the bool array is false, keep the data the same as the last element
        data(i) = data(i-1);
    end;
end;

plot(time, data);
title("BMAP Data Generation over one day");
xlabel("Seconds [s]");
ylabel("Total bytes of data generated [B]");
